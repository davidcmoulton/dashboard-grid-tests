@import "variables";

$grid-edge-space: (
    medium: 7vw,
    large: 14vw,
);
$grid-gap: 1.6%;
$grid-gap-decimal: 0.016;
$max-width: 1114px;

// Nullify the effect of the first and last gutters by reducing both the first and last column tracks by the width of the grid gap.
@function grid-edge-space($size) {
  @return calc(#{map_get($grid-edge-space, $size)} - #{$grid-gap})
}

@mixin grid-setup {
  display: grid;
  grid-column-gap: $grid-gap;
  grid-template-columns: grid-edge-space(medium) repeat(12, 1fr) grid-edge-space(medium);

  @media screen and (min-width: map_get($breakpoint, medium)) {
    grid-template-columns: grid-edge-space(large) repeat(12, 1fr) grid-edge-space(large);
  }

  @media screen and (min-width: map_get($breakpoint, x-wide)) {
     //The main 12 column section of the grid has a fixed width from this breakpoint.
    // TODO: accommodate possibility of non-percentage values? (Also consider easier case of a fixed grid gap)
    $column-gap: $max-width * $grid-gap-decimal;
    // There are 11 gutters to account for within the central 12 columns:
    $column-track-size: ($max-width - ($column-gap * 11)) / 12;
    grid-column-gap: $column-gap;
    grid-template-columns: 1fr repeat(12, $column-track-size) 1fr;
  }
}

.grid {
  @include grid-setup();
  width: 100vw;
}
